package net.thumbtack.airline.daoimpl;

import net.thumbtack.airline.dao.FlightDao;
import net.thumbtack.airline.errors.types.runtime.BadDateError;
import net.thumbtack.airline.errors.types.runtime.BadFlightIdError;
import net.thumbtack.airline.errors.types.runtime.BadPlaneNameError;
import net.thumbtack.airline.exception.ApplicationSecurityException;
import net.thumbtack.airline.exception.DataNotFoundException;
import net.thumbtack.airline.mappers.*;
import net.thumbtack.airline.model.Flight;
import net.thumbtack.airline.model.FlightInfo;
import net.thumbtack.airline.model.PlaneInfo;
import net.thumbtack.airline.querties.FlightQueryParams;
import net.thumbtack.airline.querties.FlightsQuery;
import net.thumbtack.airline.utils.dates.Dates;
import org.apache.ibatis.exceptions.PersistenceException;
import org.apache.ibatis.session.SqlSession;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Repository;

import java.sql.Date;
import java.util.ArrayList;
import java.util.List;

@Repository
public class FlightDaoImpl extends BaseDaoImpl implements FlightDao {

	private final Logger logger = LoggerFactory.getLogger(FlightDaoImpl.class);

	public FlightDaoImpl() {
	}

	protected FlightScheduleMapper getFlightScheduleMapper(SqlSession sqlSession) {
		return sqlSession.getMapper(FlightScheduleMapper.class);
	}

	protected FlightMapper getFlightMapper(SqlSession sqlSession) {
		return sqlSession.getMapper(FlightMapper.class);
	}

	protected PlaneMapper getPlaneMapper(SqlSession sqlSession) {
		return sqlSession.getMapper(PlaneMapper.class);
	}

	protected FlightInfoMapper getFlightInfoMapper(SqlSession sqlSession) {
		return sqlSession.getMapper(FlightInfoMapper.class);
	}

	protected DatesMapper getDatesMapper(SqlSession sqlSession) {
		return sqlSession.getMapper(DatesMapper.class);
	}

	protected PlacesMapper getPlacesMapper(SqlSession sqlSession) {
		return sqlSession.getMapper(PlacesMapper.class);
	}

	private void insertDates(List<Date> datesList, int flightId, SqlSession sqlSession, PlaneInfo planeInfo) {
		for (Date date : datesList) {
			Integer id = 0;
			getDatesMapper(sqlSession).insertDates(date, flightId, id);
			id = getDatesMapper(sqlSession).getIdByDateAndFlightId(flightId, date);//TODO fix error with autogenerated keys
			getPlacesMapper(sqlSession).insert(id, planeInfo.getPlacesInBusinessRow() * planeInfo.getBussinesRows(),
					planeInfo.getPlacesInEconomyRow() * planeInfo.getEconomyRows());
		}
	}

	private void loadPlaneInfo(Flight flight, SqlSession sqlSession) throws DataNotFoundException {
		PlaneInfo planeInfo = getPlaneMapper(sqlSession).getPlaneInfoByFlight(flight);
		if(planeInfo == null) {
			BadPlaneNameError planeNameError = new BadPlaneNameError();
			logger.info(planeNameError.toString());
			throw new DataNotFoundException(planeNameError);
		}
		flight.setPlaneInfo(planeInfo);
	}

	@Override
	public Flight addFlight(Flight flight) throws DataNotFoundException {
		try (SqlSession sqlSession = getSession()) {
			try {
				loadPlaneInfo(flight, sqlSession);
				getFlightInfoMapper(sqlSession).addFlight(flight);
				insertDates(flight.getDates().getDates(), flight.getFlightInfo().getId(), sqlSession, flight.getPlaneInfo());
				getFlightScheduleMapper(sqlSession).insert(flight.getDates(), flight.getFlightInfo().getId());
			} catch (PersistenceException ex) {
				sqlSession.rollback();
				BadFlightIdError badFlightIdError = new BadFlightIdError();
				logger.info(badFlightIdError.toString());
				throw new DataNotFoundException(badFlightIdError);
			} catch (RuntimeException e) {
				sqlSession.rollback();
				logger.error(e.toString());
				throw e;
			}
			sqlSession.commit();
			return flight;
		}
	}

	@Override
	public Flight changeFlight(Flight flight) throws DataNotFoundException {
		try (SqlSession sqlSession = getSession()) {
			try {
				deleteFlight(flight.getFlightInfo().getId());
				flight = addFlight(flight);
			} catch (PersistenceException e) {
				sqlSession.rollback();
				BadFlightIdError badFlightIdError = new BadFlightIdError();
				logger.info(badFlightIdError.toString());
				throw new DataNotFoundException(badFlightIdError);
			} catch (RuntimeException e) {
				sqlSession.rollback();
				logger.error(e.toString());
				throw e;
			}
			sqlSession.commit();
			return flight;
		}
	}

	protected Dates getDatesById(int flightId, SqlSession sqlSession) {
		Dates dates = getFlightScheduleMapper(sqlSession).getDatesById(flightId);
		List<Date> dateList = getDatesMapper(sqlSession).getFlightDates(flightId);
		if(dates == null) {
			dates = new Dates(dateList);
		} else {
			dates.setDates(dateList);
		}
		return dates;
	}

	@Override
	public void deleteFlight(int flightId) throws DataNotFoundException {
		try (SqlSession sqlSession = getSession()) {
			try {
				getFlightMapper(sqlSession).deleteFlight(flightId);
			} catch (PersistenceException e) {
				sqlSession.rollback();

				throw new DataNotFoundException(new BadFlightIdError());
			} catch (RuntimeException e) {
				sqlSession.rollback();
				logger.error(e.toString());
				throw e;
			}
			sqlSession.commit();
		}
	}

	@Override
	public Flight getFlight(int flightId) {
		try (SqlSession sqlSession = getSession()) {
			FlightInfo flightInfo = getFlightInfoMapper(sqlSession).getFlightById(flightId);
			PlaneInfo planeInfo = getPlaneMapper(sqlSession).getPlaneInfoByPlaneId(
					getFlightInfoMapper(sqlSession).getPlaneId(flightId));
			Dates dates = getDatesById(flightId, sqlSession);
			return new Flight(planeInfo, flightInfo, dates);
		}
	}

	@Override
	public Flight approveFlight(int flightId) throws DataNotFoundException {
		try (SqlSession sqlSession = getSession()) {
			try {
				getFlightMapper(sqlSession).approveFlight(flightId);
			} catch (PersistenceException e) {
				sqlSession.rollback();
				BadFlightIdError badFlightIdError = new BadFlightIdError();
				logger.info(badFlightIdError.toString());
				throw new DataNotFoundException(badFlightIdError);

			} catch (RuntimeException e) {
				sqlSession.rollback();
				logger.error(e.toString());
				throw e;
			}
			sqlSession.commit();
			return getFlight(flightId);
		}
	}

	@Override
	public List<Flight> getFlightByQuery(FlightsQuery query) {
		try (SqlSession sqlSession = getSession()) {
			List<Integer> flightIds = getFlightMapper(sqlSession).getFlightsIdByQuery(
					query.getValueByKey(FlightQueryParams.getToTown()),
					query.getValueByKey(FlightQueryParams.getFromTown()),
					query.getValueByKey(FlightQueryParams.getFlightName()),
					Date.valueOf(query.getValueByKey((FlightQueryParams.getFromDate()))),
					Date.valueOf(query.getValueByKey(FlightQueryParams.getToDate())),
					query.getValueByKey(FlightQueryParams.getPlaneName()));
			List<Flight> flights = new ArrayList<>();

			for(Integer flightId : flightIds) {
				flights.add(getFlight(flightId));
			}
			return flights;
		}
	}

	@Override
	public FlightInfo getFlightInfo(int flightId) throws ApplicationSecurityException {
		try(SqlSession sqlSession = getSession()) {
			FlightInfo flightInfo = getFlightInfoMapper(sqlSession).getFlightById(flightId);
			if(flightInfo == null) {
				BadFlightIdError badFlightIdError = new BadFlightIdError();
				logger.error(badFlightIdError.toString());
				throw new ApplicationSecurityException(badFlightIdError);
			}
			return flightInfo;
		}
	}

	@Override
	public void dropTable() {
		try (SqlSession sqlSession = getSession()) {
			try {
				getFlightMapper(sqlSession).dropFlightsTable();
			} catch (RuntimeException e) {
				sqlSession.rollback();
				logger.error(e.toString());
				throw e;
			}
			sqlSession.commit();
		}
	}

	@Override
	public int getFlightDateIdByDateAndFlightId(int flightId, Date date) throws DataNotFoundException {
		try(SqlSession sqlSession = getSession()) {
			Integer id = getDatesMapper(sqlSession).getIdByDateAndFlightId(flightId, date);
			if(id == null) {
				BadDateError badDateError = new BadDateError();
				logger.info(badDateError.toString());
				throw new DataNotFoundException(badDateError);
			}
			return id;
		}
	}
}
